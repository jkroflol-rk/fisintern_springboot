package com.example.fisintern_spring.controllers;

import com.example.fisintern_spring.models.Customer;
import com.example.fisintern_spring.repositories.CustomerRepository;
import com.example.fisintern_spring.services.CustomerService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@Controller
@RequestMapping("/customers")
public class CustomerController {
    @Autowired //This means to get the bean called userRepository
    //Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;

    @Autowired
    private CustomerService customerService;

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Customer> getAllUsers() {
        // This returns a JSON or XML with the users
        return customerRepository.findAll();
    }

    @GetMapping(path = "/findbyid/{id}")
    public @ResponseBody Customer findCustomerById(@PathVariable int id) {
        // This returns a JSON or XML with the users
        return customerService.findCustomerById(id);
    }

    @GetMapping(path = "/find")
    public @ResponseBody List<Customer> findCustomerByName(@RequestParam String keyword) {
        // This returns a JSON or XML with the users
        return customerRepository.findCustomer(keyword);
    }

    @GetMapping(path = "/findcompany")
    public @ResponseBody List<Customer> findCompanyCustomer() {
        return customerRepository.findCompanyCustomer();
    }

    @GetMapping(path = "/finddebt")
    public @ResponseBody List<Customer> findDebtCustomer() {
        return customerRepository.findDebtCustomer();
    }

    @GetMapping(path = "/findbirthday")
    public @ResponseBody List<Customer> findBirthdayCustomer(@RequestParam String d1, @RequestParam String d2) {
        LocalDate date1 = LocalDate.parse(d1);
        LocalDate date2 = LocalDate.parse(d2);
        return customerRepository.findBirthdayCustomer(date1, date2);
    }

    @GetMapping(path = "/findbysex/{sex}")
    public @ResponseBody List<Customer> findBirthdayCustomer(@PathVariable Customer.Gender sex) {
        return customerRepository.findCustomerBySex(sex);
    }

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody Customer addNewCustomer(@RequestBody Customer customer) {
        return customerRepository.save(customer);
    }

    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody String deleteCustomer(@PathVariable int id) {
        return customerService.deleteCustomer(id);
    }

    @PutMapping(path = "/updatecustomer/{id}")
    public @ResponseBody String updateCustomer(@PathVariable int id, @RequestBody Customer customer) {
        return customerService.updateCustomer(id, customer);
    }
}
