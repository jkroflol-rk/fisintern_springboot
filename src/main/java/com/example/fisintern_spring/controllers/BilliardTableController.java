package com.example.fisintern_spring.controllers;

import com.example.fisintern_spring.models.BilliardTable;
import com.example.fisintern_spring.models.Customer;
import com.example.fisintern_spring.repositories.BilliardTableRepository;
import com.example.fisintern_spring.services.BilliardTableService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/tables")
public class BilliardTableController {
    @Autowired //This means to get the bean called userRepository
    //Which is auto-generated by Spring, we will use it to handle the data
    private BilliardTableRepository tableRepository;

    @Autowired
    private BilliardTableService tableService;

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<BilliardTable> getAllUsers() {
        // This returns a JSON or XML with the users
        return tableRepository.findAll();
    }

    @GetMapping(path = "/findbyid/{id}")
    public @ResponseBody BilliardTable findTableById(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return tableService.findTableById(id);
    }

    @GetMapping(path = "/findbyname")
    public @ResponseBody List<BilliardTable> getAllUsers(@RequestParam String keyword) {
        // This returns a JSON or XML with the users
        return tableRepository.findTable(keyword);
    }

    @GetMapping(path = "/status/{status}")
    public @ResponseBody List<BilliardTable> getTableByStatus(@PathVariable BilliardTable.Status status) {
        return tableRepository.findTableByStatus(status);
    }

    @GetMapping(path = "/findbyzone/{zone}")
    public @ResponseBody List<BilliardTable> getTableByZone(@PathVariable Integer zone) {
        return tableRepository.findTableByZone(zone);
    }

    @PostMapping(path = "/add")
    public @ResponseBody BilliardTable addTable(@RequestBody BilliardTable table) {
        return tableRepository.save(table);
    }

    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody String deleteTable(@PathVariable Integer id) {
        return tableService.deleteTable(id);
    }

    @PutMapping(path = "/update/{id}")
    public @ResponseBody String updateTable(@PathVariable Integer id, @RequestBody BilliardTable table) {
        return tableService.updateTable(id, table);
    }
}
